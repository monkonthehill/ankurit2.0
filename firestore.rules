rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if the authenticated user is an admin
    function isAdmin() {
      return request.auth != null && request.auth.token.admin == true;
    }

    // Helper function to check if the authenticated user matches the document owner
    function isUser(userId) {
      return request.auth != null && userId == request.auth.uid;
    }

    // Helper function to validate review data format and content
    function isValidReview(data) {
      return data.rating is number &&
             data.rating >= 1 &&
             data.rating <= 5 &&
             data.comment is string &&
             data.comment.size() >= 10 &&
             data.comment.size() <= 1000 &&
             data.reviewerId is string &&
             data.reviewerName is string;
    }

    // Helper function to validate membership data
    function isValidMembership(data) {
      return data.id is string &&
             data.name is string &&
             data.price is number &&
             data.duration is number &&
             data.benefits is list &&
             (data.activatedAt == null || data.activatedAt is timestamp) &&
             (data.expiresAt == null || data.expiresAt is timestamp);
    }

    // Available plans collection (read-only for all users)
    match /availablePlans/{planId} {
      allow read: if true; // Anyone can view available plans
      allow write: if isAdmin(); // Only admins can modify plans
    }

    // User profiles collection
    match /users/{userId} {
      // Allow public read access to user profiles
      allow read: if true;

      // Allow a user to create or update their own profile
      allow create, update: if isUser(userId) || isAdmin();

      // Additional rule for membership updates
      allow update: if (
        // User can update their own membership if providing valid data
        (isUser(userId) && 
         request.resource.data.membership != null && 
         isValidMembership(request.resource.data.membership)) ||
        // Or admin can update any field
        isAdmin()
      );

      // Deny profile deletion
      allow delete: if false;

      // Reviews subcollection under each user
      match /reviews/{reviewId} {
        // Allow public read access to reviews on a user's profile
        allow read: if true;

        // Allow authenticated users to create a review on another user's profile
        allow create: if request.auth != null &&
                       request.auth.uid != userId &&
                       request.resource.data.reviewerId == request.auth.uid &&
                       isValidReview(request.resource.data);

        // Allow the original reviewer to update their review within 24 hours of creation
        allow update: if request.auth != null &&
                        resource.data.reviewerId == request.auth.uid &&
                        (request.time - resource.data.createdAt) <= duration.value(24, 'h') &&
                        isValidReview(request.resource.data);

        // Allow the original reviewer or an admin to delete a review
        allow delete: if request.auth != null &&
                        (resource.data.reviewerId == request.auth.uid || isAdmin());
      }

      // Private subcollection example - deny all access
      match /private/{document} {
        allow read, write: if false;
      }
    }

    // Orders collection
    match /orders/{orderId} {
      // Allow buyer and seller to read/update their specific order
      allow read, update: if request.auth != null &&
                          (resource.data.buyerId == request.auth.uid || 
                           resource.data.sellerId == request.auth.uid);
      // Allow creating an order if the buyerId matches the authenticated user
      allow create: if request.auth != null &&
                    request.resource.data.buyerId == request.auth.uid;
      // Deny deletion
      allow delete: if false;
    }
  }
}