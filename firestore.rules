rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // üîÅ Existing rules (unchanged)
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;

      // Followers subcollection
      match /followers/{followerId} {
        allow read: if true;
        allow create: if request.auth != null &&
                       request.auth.uid == followerId;
        allow delete: if request.auth != null &&
                       (request.auth.uid == followerId ||
                        request.auth.uid == userId);
      }

      // Following subcollection
      match /following/{followingId} {
        allow read: if true;
        allow create: if request.auth != null &&
                       request.auth.uid == userId;
        allow delete: if request.auth != null &&
                       (request.auth.uid == userId ||
                        request.auth.uid == followingId);
      }
    }

    // Reports collection
    match /reports/{reportId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null &&
                   (request.auth.token.admin == true ||
                    resource.data.reporterId == request.auth.uid);
      allow update: if request.auth != null &&
                     request.auth.token.admin == true;
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null &&
                   resource.data.userId == request.auth.uid;
      allow update: if request.auth != null &&
                     resource.data.userId == request.auth.uid;
    }
    
// Chats collection
match /chats/{chatId} {
  // Allow read and write (create/update/delete) if user is a participant
  allow read, create, update: if request.auth != null &&
    (request.resource.data.participants.hasAny([request.auth.uid]) ||
     resource.data.participants.hasAny([request.auth.uid]));

  // ‚úÖ Allow delete if the requesting user is a participant
  allow delete: if request.auth != null &&
    resource.data.participants.hasAny([request.auth.uid]);

  // Subcollection: messages
  match /messages/{messageId} {
    // Allow read if user is in participants
    allow read: if request.auth != null &&
      get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);

    // Allow message creation by sender only
    allow create: if request.auth != null &&
      request.resource.data.senderId == request.auth.uid &&
      get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);

    // ‚úÖ Allow delete by either participant (for full cleanup)
    allow delete: if request.auth != null &&
      get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
  }
}



  }
}
